/*빌더 패턴*/
생성자에 들어갈 매개 변수가 많든 적든 차례차례 매개 변수를 받아들이고 (메서드 체이닝 형식)
매개 변수를 받은 뒤에 이 변수들을 통합해서 한번에 사용을 한다.
= 매개 변수가 많을 때 / 매개변수가 추가될 때 빛을 발하는 패턴

장점 :
1. 가독성 향상
    : 생성자의 매개변수가 많을경우 각 매개변수가 어떤 의미를 가지는지 헷갈리는 경우가 있는데
      빌더 패턴을 사용해서 각 매개변수가 어떤 의미를 가지는지 가시적으로 확인할 수 있다. (사실 요즘은 IDE가 다 표시해줌)
      (= 또한 매개변수로 전달된 데이터의 순서가 달라져도 객체를 생성할 수 있다.)
2. 생성자 난발 방지
    : 객체의 필드 변수가 많은경우에 생성자로 객체를 생성한다고 상황을 가정했을 때,
      모든 변수가 아닌 특정 변수만 매개변수로 들어왔을 때 생성자를 모든 경우의 수에 맞게 정의해 줘야한다.
      빌더 패턴을 사용하면 위의 문제점을 해결할 수 있다.
      (= 필요한 데이터만 설정이 가능하다. / 매개변수가 늘었을 때 확장에 용이하다.)

단점 :
1.빌더 생성 비용이 크지는 않지만 성능에 민감한 상황에서는 문제가 될 수 있다.
2.코드가 장황해지기 때문에 매개변수가 4개 이상은 되어야 값어치를 한다.

사용목적 : 매개변수가 많아 생성자의 사용이 불편해질 때의 해결책으로 사용

/*예제 상황*/

참고 :
https://devfunny.tistory.com/337
https://jdm.kr/blog/217
/*프로토타입 패턴*/
객체를 생성하는 데 비용(시간과 자원)이 많이 들고,
비슷한 객체가 이미 있는 경우에 사용되는 생성 패턴 중 하나
= 객체를 생성하는 데 비용(시간과 노력)이 많이 들고, 이미 유사한 객체가 존재하는 경우에 사용

(예를 들어 DB로부터 데이터를 가져오는 객체가 존재한다고 가정해보자.
 만약 DB로부터 가져온 데이터를 우리의 프로그램에서 수차례 수정을 해야하는 요구사항이 있는 경우,
 매번 new 라는 키워드를 통해 객체를 생성하여 DB로부터 항상 모든 데이터를 가져오는 것은 좋은 아이디어가 아니다.
 왜냐하면 DB로 접근해서 데이터를 가져오는 행위는 비용이 크기 때문입니다.
 따라서 한 번 DB에 접근하여 데이터를 가져온 객체를 필요에 따라
 새로운 객체에 복사하여 데이터 수정 작업을 하는 것이 더 좋은 방법이다.)

장점 :
1. 객체 생성과 작업에 소요되는 비용(시간과 노력)을 절감할 수 있다.
2. 다른 생성패턴과 달리 객체 생성을 위한 별도의 객체 생성 클래스가 필요없다.

단점 :
1.생성될 객체들의 자료형인 클래스들이 모두 clone() 메서드를 구현해야 한다.

사용목적 : 객체 생성시에 비용이 많이드는 상황
        (ex :DB끌어오기 , 다시 반복된 작업을 해야하는 상황)에
        사용하면 효과를 볼 수 있다.

/*예제 상황*/
직원 명단을 DB에서 끌어오고 싶은데 명단에 사람이 너무 많다.
게다가 DB를 사용해야하는 곳이 많아 독립된 데이터 리스트가 여러 개 필요하다.
매번 DB에서 데이터를 끌어오기에는 소요되는 시간이 많은 상황이다.

참고 :
https://readystory.tistory.com/122
/*이터레이터 패턴*/
집합을 가진 객체와 원소를 탐색하는 영역이 분리되어 구현하는 패턴
=   하나의 통일된 출력방식을 만들고자 하거나
    집합을 가진 객체의 코드 변화가 잦을 경우 사용하면 좋은 패턴

장점 :
1.  집합을 가진 객체(ParkingLot)의 집합 자료구조의 유형이 변하거나 추가되더라도
    탐색영역(Iterator)의 메소드만 수정하면 됨으로 코드 수정시 여파가 크지 않다.

단점 :
1.  출력을 해야하는 집합객체가 많지 않다면 Iterator 클래스를 만드는 것이
    필요이상으로 코드 분리한 감이 없지않아 있다.

사용목적 : 하나의 통일된 출력방식을 만들고자 하거나 집합을 가진 객체의 코드 변화가 잦을 경우 사용

/*예제 상황*/
집합 데이터 구조가 다른 주차장 객체에서 자동차를 Iterator를 통해서 꺼내보자.

참고 :
https://lee1535.tistory.com/71
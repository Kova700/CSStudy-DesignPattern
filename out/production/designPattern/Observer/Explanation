/*옵저버 패턴*/
옵저버(감시자) 객체를 감시하고자 하는 객체에 등록해서
해당 객체의 상태변화가 있을 때마다 메서드를
통해서 객체가 직접 옵저버에게 통지하도록 하는 패턴
즉 , 옵저버 객체를 통해서 객체의 상태 변화를 관찰할 수 있는 패턴

장점 :
1. 실시간으로 한 객체의 변경사항을 다른 객체에 전파할 수 있다.
2. 느슨한 결합으로 시스템이 유연하고 객체간의 의존성을 제거하고자 할 때 좋다.
==> 이러한 장점이 MVVM패턴에서 활용되고 있다.

단점 :
1.observer를 제때 제거해주지 않으면 메모리 누수가 일어날 수 있다.
2.비동기 방식이기 때문에 이벤트 구독을 원하는 순서대로 받지 못할 수 있다.
3.Thread safe 하지 않아 구독을 신청/취소하는 동안 원하는 결괏값을 얻기 힘들 수 도 있다.

옵저버 패턴은 정말 많은 프레임워크에 라이브러리 혹은 기반 패턴으로 사용되고 있다.
웹 , 모바일에 특히 많이 사용되고 있음으로 실제 사용예제들을 봐가면서 공부할 필요가 있다.

/*예제 상황*/
크루 코치의 행동을 크루원들이 즉각적으로 알 수 있게 코드를 짜보자.

참고 :
https://pjh3749.tistory.com/266
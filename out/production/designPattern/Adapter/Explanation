/*어댑터 패턴*/
한 클래스의 인터페이스를 클라이언트에서 사용하고자하는 다른 인터페이스로 변환하는 패턴
어댑터를 이용하면 인터페이스 호환성 문제 때문에 같이 쓸 수 없는 클래스들을 '연결'해서 쓸 수 있다.
= 특정 인터페이스에 있는 메소드나 변수를
    특정 인터페이스가 아닌 다른 인터페이스에서 사용하고자 할때 유용하다.

장점 :
1. 기존 코드를 변경하지 않고 다른 인터페이스와 연결해서 사용가능함으로 재활용성이 증가한다.

단점 :
1. 인터페이스 규모가 커질수록 구현해야하는 어뎁터의 복잡도가 증가한다.

사용목적 : 두 개 이상의 인터페이스의 연결다리가 필요할 때 사용!!

/*예제 상황*/
Java 인터페이스와 Kotlin 인터페이스는 독립적이다.
Java 인터페이스에서 Kotlin 인터페이스의 메소드를 사용할 순 없을까?

참고 :
https://jusungpark.tistory.com/22
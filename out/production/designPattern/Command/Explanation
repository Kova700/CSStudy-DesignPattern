/*커맨드 패턴*/
실행될 기능을 캡슐화함으로써 재사용성이 높은 클래스를 설계하는 패턴
(이벤트가 발생했을 때, 클래스의 기능이 다양하고 변경이 잦은 경우에
이벤트를 발생시키는 클래스를 변경하지 않고 재사용하고자 할 때 유용하다)

= 실행될 기능을 캡슐화함으로써 기능의 실행을 요구하는
호출자(Invoker)클래스와 실제 기능을 실행하는 수신자(Receiver)클래스
사이의 의존성을 지워준다.
==> 실행될 기능의 변경에도 호출자 클래스를 수정 없이 그대로 사용할 수 있다.

장점 :
어떠한 사물의 기능을 구현하고자 할 때,
하나의 기능을 하는 객체와 기능을 호출하는 객체의 분리를 통해서
각 객체간의 의존성을 없애는 장점을 얻을 수 있다.
이로 인해서 각 객체의 재사용성을 높일 수 있으며 유지 보수에 뛰어난 장점을 얻는다.

단점 :
어떤 사물(수신자)의 기능 하나하나 마다 기능 클래스와 커맨드 클래스를 따로
만들어야하기 때문에 클래스가 무수히 많아진다.

/*예제 상황*/
버튼에 알람을 울리는 기능과 불이 켜지는 기능을 구현하고 싶은데
버튼과 알람 , 버튼과 불 사이에 의존성을 없애고싶다.

참고 :
https://gmlwjd9405.github.io/2018/07/07/command-pattern.html
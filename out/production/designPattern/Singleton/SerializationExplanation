/*직렬화란?*/

객체를 저장하거나 메모리, 데이터베이스 혹은 파일로 옮기려면 어떻게 해야할까?
이럴 때 필요한 것이 직렬화다. 직렬화란 객체를 바이트 스트림으로 바꾸는 것,
즉 객체에 저장된 데이터를 스트림에 쓰기(write) 위해 연속적인(serial) 데이터로 변환하는 것이다.
직렬화의 주된 목적은 객체를 상태 그대로 저장하고 필요할 때 역직렬화를 통해 다시 사용하는 것

Serialization(직렬화)란 시스템 내부에서 사용하는 객체를
외부의 시스템에서도 사용할 수 있도록 byte형태로 데이터를 변환시키는 기술


/*직렬화를 해야하는 이유*/

값 형식 데이터(Value Type) , 참조 형식 데이터(Reference Type)데이터 중에서
디스크(HDD,SSD)에 저장하거나 통신에는 값 형식 데이터(Value Type)만 가능하다.
참조 형식 데이터(Reference Type)는 실제 데이터 값이 아닌 힙(Heap)에 할당되어있는 메모리 번지 주소를 가지고 있기
때문에 저장, 통신에 사용할 수 없다. 왜 참조 형식 데이터는 사용할 수 없을까 ?

예를 들자면
포인터 변수 Class A 를 선언하고 객체를 만들어 그 주소 값이 0x00045523라고 가정하자.
그리고 이 값을 파일에 포함하여 저장했다고 해보자.
그 후 프로그램을 종료하고 다시 실행해서 주소값 0x00045523을 가져오더라도
기존 A 객체의 데이터를 가져올 수 없다.(프로그램이 종료되면 기존에 할당되었던 메모리(0x00045523)는 해제되고 없어진다)

네트워크 통신 또한 마찬가지이다.
각 PC마다 사용하고있는 메모리 공간 주소는 전혀 다르다.
그렇기 때문에 내가 다른 PC로 전송한 A객체 데이터(0x00045523)은 무의미하다.
이 데이터를 받은 PC에서의 메모리 주소 0x00045523에는 전혀 다른 값이 존재하기 때문이다.

직렬화를 하게 되면 각 주소값이 가지는 데이터들을 전부 끌어모아서 값 형식(Value Type)데이터로 변환해준다.
이러한 이유 때문에 데이터를 저장, 통신전에 '데이터 직렬화(Serialization)' 작업이 필요한 것이다.
직렬화가 된 데이터들은 언어에 따라서 텍스트 또는 바이너리 등의 형태가 되는데,
이러한 형태가 되었을 때 저장하거나 통신 시 파싱이 가능한 유의미한 데이터가 되는 것이다.

한 가지 예시를 더 말하자면,
String이 포인터로 구현되어있는 경우 int, double 등 과는 다르게 내부적으로 메모리가 연속적으로 되어있지 않다.
(int*는 4byte씩 double* 8byte씩 메모리가 연속적으로 배치되어있음)
이 스트링 데이터를 무사히 저장 혹은 전송하기 위해서는
이 메모리 데이터들을 연속적으로 배치, 값 타입 변조 즉 직렬화를 해줘야 하는 것이다.

+)안드로이드 상에선 직렬화를 이용해 Activity간 또는 Service간 클래스 타입의 데이터를 주고 받는 용도로 주로 사용한다